const express = require("express");
const bodyParser = require("body-parser");
const admin = require("firebase-admin");

// Initialize Firebase Admin SDK
const serviceAccount = require("./parkme-b937c-firebase-adminsdk-i8wpn-fe1f70dff7.json");
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://parkme-b937c.firebaseio.com", // Replace with your Firebase database URL
});

// Initialize Firestore
const db = admin.firestore();

const app = express();
const PORT = 3000;

// Middleware
app.use(bodyParser.json());

// API to insert data into the ParkingLocation collection
app.post("/addParkingLocation", async (req, res) => {
    try {
      const { name, longitude, latitude, freeSlots, totalSlots } = req.body;
  
      if (!name || !longitude || !latitude || !freeSlots || !totalSlots) {
        return res.status(400).json({ error: "All fields are required." });
      }
  
      // Parking data without the uniqueId; Firebase will auto-generate it
      const parkingData = {
        name,
        longitude,
        latitude,
        freeSlots,
        totalSlots,
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
      };
  
      // Add the parking data to Firestore, Firebase will auto-generate the document ID
      const docRef = await db.collection("ParkingLocation").add(parkingData);
  
      // The document ID generated by Firebase will be used as uniqueId
      res.status(200).json({
        message: "Parking location added successfully.",
        data: { ...parkingData, uniqueId: docRef.id },
      });
    } catch (error) {
      console.error("Error adding parking location:", error);
      res.status(500).json({ error: "Internal server error." });
    }
  });
  


// API to retrieve all parking locations
app.get("/getParkingLocations", async (req, res) => {
    try {
      const snapshot = await db.collection("ParkingLocation").get();
      
      // If no parking locations are found
      if (snapshot.empty) {
        return res.status(404).json({ message: "No parking locations found." });
      }
  
      // Map Firestore documents to an array
      const locations = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
      }));
  
      res.status(200).json({
        message: "Parking locations retrieved successfully.",
        data: locations,
      });
    } catch (error) {
      console.error("Error retrieving parking locations:", error);
      res.status(500).json({ error: "Internal server error." });
    }
  });

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
